import com.github.junrar.Archive;
import com.github.junrar.exception.RarException;
import com.github.junrar.rarfile.FileHeader;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.*;
import java.awt.event.*;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class RarImageViewer extends JFrame {

    private List<Image> images;
    private int currentIndex;

    private ImagePanel leftImagePanel;
    private ImagePanel rightImagePanel;

    public RarImageViewer() {
        super("RAR Image Viewer");

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1200, 600);

        images = new ArrayList<>();
        currentIndex = 0;

        leftImagePanel = new ImagePanel();
        rightImagePanel = new ImagePanel();

        leftImagePanel.setPreferredSize(new Dimension(600, 600));
        rightImagePanel.setPreferredSize(new Dimension(600, 600));

        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, leftImagePanel, rightImagePanel);
        splitPane.setDividerLocation(600);
        splitPane.setResizeWeight(0.5);
        add(splitPane);

        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                leftImagePanel.resizeImage();
                rightImagePanel.resizeImage();
            }
        });

        leftImagePanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1) {
                    previousImage();
                } else if (e.getButton() == MouseEvent.BUTTON3) {
                    nextImage();
                }
            }
        });

        rightImagePanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getButton() == MouseEvent.BUTTON1) {
                    nextImage();
                } else if (e.getButton() == MouseEvent.BUTTON3) {
                    previousImage();
                }
            }
        });

        createKeyBindings();

        DropTarget dropTarget = new DropTarget(this, new DropTargetAdapter() {
            @Override
            public void drop(DropTargetDropEvent event) {
                event.acceptDrop(DnDConstants.ACTION_COPY);
                try {
                    Transferable transferable = event.getTransferable();
                    if (transferable.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
                        List<File> fileList = (List<File>) transferable.getTransferData(DataFlavor.javaFileListFlavor);
                        if (!fileList.isEmpty()) {
                            File rarFile = fileList.get(0);
                            loadImages(rarFile);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
        setDropTarget(dropTarget);
    }

    private static class ImagePanel extends JPanel {

        private Image image;
        private int currentWidth;
        private int currentHeight;
        private double scaleFactor = 1.0;

        public ImagePanel() {
            setBackground(Color.BLACK);
            setPreferredSize(new Dimension(600, 600));

            addMouseWheelListener(new MouseAdapter() {
                @Override
                public void mouseWheelMoved(MouseWheelEvent e) {
                    int notches = e.getWheelRotation();
                    if (notches < 0) {
                        scaleFactor += 0.1;
                    } else {
                        scaleFactor -= 0.1;
                        if (scaleFactor < 0.1) {
                            scaleFactor = 0.1;
                        }
                    }
                    resizeImage();
                }
            });

            addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    // Do nothing for left mouse button press
                }

                @Override
                public void mouseClicked(MouseEvent e) {
                    // Do nothing for mouse click
                }
            });

            addMouseMotionListener(new MouseAdapter() {
                @Override
                public void mouseDragged(MouseEvent e) {
                    // Do nothing for mouse drag
                }
            });

        }

        public void setImage(Image image) {
            this.image = image;
            resizeImage();
        }

        public void resizeImage() {
            if (image != null) {
                int width = getWidth();
                int height = getHeight();

                double imageAspect = (double) image.getWidth(this) / image.getHeight(this);
                double panelAspect = (double) width / height;

                if (imageAspect > panelAspect) {
                    currentWidth = (int) (width * scaleFactor);
                    currentHeight = (int) (width * scaleFactor / imageAspect);
                } else {
                    currentWidth = (int) (height * scaleFactor * imageAspect);
                    currentHeight = (int) (height * scaleFactor);
                }

                repaint();
            }
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            if (image != null) {
                int x = (getWidth() - currentWidth) / 2;
                int y = (getHeight() - currentHeight) / 2;

                g.drawImage(image, x, y, currentWidth, currentHeight, this);
            }
        }

    }

    private void loadImages(File rarFile) {
        images.clear();
        currentIndex = 0;

        try {
            Archive archive = new Archive(rarFile);
            List<FileHeader> fileHeaders = archive.getFileHeaders();
            for (FileHeader fileHeader : fileHeaders) {
                File outputFile = File.createTempFile("temp", ".jpg");
                FileOutputStream outputStream = new FileOutputStream(outputFile);
                archive.extractFile(fileHeader, outputStream);
                outputStream.close();
                Image image = Toolkit.getDefaultToolkit().getImage(outputFile.getAbsolutePath());
                images.add(image);
            }

            if (!images.isEmpty()) {
                Image leftImage = images.get(0);
                Image rightImage = images.size() > 1 ? images.get(1) : null;
                leftImagePanel.setImage(leftImage);
                rightImagePanel.setImage(rightImage);
            }
        } catch (RarException | IOException e) {
            e.printStackTrace();
        }
    }

    private void nextImage() {
        if (!images.isEmpty()) {
            currentIndex = (currentIndex + 1) % images.size();
            Image leftImage = images.get(currentIndex);
            Image rightImage = (currentIndex + 1) < images.size() ? images.get(currentIndex + 1) : null;
            leftImagePanel.setImage(leftImage);
            rightImagePanel.setImage(rightImage);
        }
    }

    private void previousImage() {
        if (!images.isEmpty()) {
            currentIndex = (currentIndex - 1 + images.size()) % images.size();
            Image leftImage = images.get(currentIndex);
            Image rightImage = (currentIndex + 1) < images.size() ? images.get(currentIndex + 1) : null;
            leftImagePanel.setImage(leftImage);
            rightImagePanel.setImage(rightImage);
        }
    }

    private void createKeyBindings() {
        InputMap inputMap = leftImagePanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ActionMap actionMap = leftImagePanel.getActionMap();

        inputMap.put(KeyStroke.getKeyStroke("LEFT"), "previousImage");
        actionMap.put("previousImage", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                previousImage();
            }
        });

        inputMap = rightImagePanel.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        actionMap = rightImagePanel.getActionMap();

        inputMap.put(KeyStroke.getKeyStroke("RIGHT"), "nextImage");
        actionMap.put("nextImage", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                nextImage();
            }
        });
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            RarImageViewer viewer = new RarImageViewer();
            viewer.setVisible(true);
        });
    }
}
